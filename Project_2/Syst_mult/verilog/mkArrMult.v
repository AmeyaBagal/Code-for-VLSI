//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Nov 24 11:28:18 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_startP                     O     1 const
// get_ans                        O   128 reg
// RDY_get_ans                    O     1
// outp_start                     O     1 const
// RDY_outp_start                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// startP_a                       I    64 reg
// startP_b                       I    64 reg
// startP_s                       I     1 reg
// EN_startP                      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkArrMult(CLK,
		 RST_N,

		 startP_a,
		 startP_b,
		 startP_s,
		 EN_startP,
		 RDY_startP,

		 get_ans,
		 RDY_get_ans,

		 outp_start,
		 RDY_outp_start);
  input  CLK;
  input  RST_N;

  // action method startP
  input  [63 : 0] startP_a;
  input  [63 : 0] startP_b;
  input  startP_s;
  input  EN_startP;
  output RDY_startP;

  // value method get_ans
  output [127 : 0] get_ans;
  output RDY_get_ans;

  // value method outp_start
  output outp_start;
  output RDY_outp_start;

  // signals for module outputs
  wire [127 : 0] get_ans;
  wire RDY_get_ans, RDY_outp_start, RDY_startP, outp_start;

  // register b_filled
  reg [3 : 0] b_filled;
  wire [3 : 0] b_filled_D_IN;
  wire b_filled_EN;

  // register buffA_0_0
  reg [15 : 0] buffA_0_0;
  wire [15 : 0] buffA_0_0_D_IN;
  wire buffA_0_0_EN;

  // register buffA_0_1
  reg [15 : 0] buffA_0_1;
  wire [15 : 0] buffA_0_1_D_IN;
  wire buffA_0_1_EN;

  // register buffA_0_2
  reg [15 : 0] buffA_0_2;
  wire [15 : 0] buffA_0_2_D_IN;
  wire buffA_0_2_EN;

  // register buffA_0_3
  reg [15 : 0] buffA_0_3;
  wire [15 : 0] buffA_0_3_D_IN;
  wire buffA_0_3_EN;

  // register buffA_1_0
  reg [15 : 0] buffA_1_0;
  wire [15 : 0] buffA_1_0_D_IN;
  wire buffA_1_0_EN;

  // register buffA_1_1
  reg [15 : 0] buffA_1_1;
  wire [15 : 0] buffA_1_1_D_IN;
  wire buffA_1_1_EN;

  // register buffA_1_2
  reg [15 : 0] buffA_1_2;
  wire [15 : 0] buffA_1_2_D_IN;
  wire buffA_1_2_EN;

  // register buffA_1_3
  reg [15 : 0] buffA_1_3;
  wire [15 : 0] buffA_1_3_D_IN;
  wire buffA_1_3_EN;

  // register buffA_2_0
  reg [15 : 0] buffA_2_0;
  wire [15 : 0] buffA_2_0_D_IN;
  wire buffA_2_0_EN;

  // register buffA_2_1
  reg [15 : 0] buffA_2_1;
  wire [15 : 0] buffA_2_1_D_IN;
  wire buffA_2_1_EN;

  // register buffA_2_2
  reg [15 : 0] buffA_2_2;
  wire [15 : 0] buffA_2_2_D_IN;
  wire buffA_2_2_EN;

  // register buffA_2_3
  reg [15 : 0] buffA_2_3;
  wire [15 : 0] buffA_2_3_D_IN;
  wire buffA_2_3_EN;

  // register buffA_3_0
  reg [15 : 0] buffA_3_0;
  wire [15 : 0] buffA_3_0_D_IN;
  wire buffA_3_0_EN;

  // register buffA_3_1
  reg [15 : 0] buffA_3_1;
  wire [15 : 0] buffA_3_1_D_IN;
  wire buffA_3_1_EN;

  // register buffA_3_2
  reg [15 : 0] buffA_3_2;
  wire [15 : 0] buffA_3_2_D_IN;
  wire buffA_3_2_EN;

  // register buffA_3_3
  reg [15 : 0] buffA_3_3;
  wire [15 : 0] buffA_3_3_D_IN;
  wire buffA_3_3_EN;

  // register buffB_0_0
  reg [15 : 0] buffB_0_0;
  wire [15 : 0] buffB_0_0_D_IN;
  wire buffB_0_0_EN;

  // register buffB_0_1
  reg [15 : 0] buffB_0_1;
  wire [15 : 0] buffB_0_1_D_IN;
  wire buffB_0_1_EN;

  // register buffB_0_2
  reg [15 : 0] buffB_0_2;
  wire [15 : 0] buffB_0_2_D_IN;
  wire buffB_0_2_EN;

  // register buffB_0_3
  reg [15 : 0] buffB_0_3;
  wire [15 : 0] buffB_0_3_D_IN;
  wire buffB_0_3_EN;

  // register buffB_1_0
  reg [15 : 0] buffB_1_0;
  wire [15 : 0] buffB_1_0_D_IN;
  wire buffB_1_0_EN;

  // register buffB_1_1
  reg [15 : 0] buffB_1_1;
  wire [15 : 0] buffB_1_1_D_IN;
  wire buffB_1_1_EN;

  // register buffB_1_2
  reg [15 : 0] buffB_1_2;
  wire [15 : 0] buffB_1_2_D_IN;
  wire buffB_1_2_EN;

  // register buffB_1_3
  reg [15 : 0] buffB_1_3;
  wire [15 : 0] buffB_1_3_D_IN;
  wire buffB_1_3_EN;

  // register buffB_2_0
  reg [15 : 0] buffB_2_0;
  wire [15 : 0] buffB_2_0_D_IN;
  wire buffB_2_0_EN;

  // register buffB_2_1
  reg [15 : 0] buffB_2_1;
  wire [15 : 0] buffB_2_1_D_IN;
  wire buffB_2_1_EN;

  // register buffB_2_2
  reg [15 : 0] buffB_2_2;
  wire [15 : 0] buffB_2_2_D_IN;
  wire buffB_2_2_EN;

  // register buffB_2_3
  reg [15 : 0] buffB_2_3;
  wire [15 : 0] buffB_2_3_D_IN;
  wire buffB_2_3_EN;

  // register buffB_3_0
  reg [15 : 0] buffB_3_0;
  wire [15 : 0] buffB_3_0_D_IN;
  wire buffB_3_0_EN;

  // register buffB_3_1
  reg [15 : 0] buffB_3_1;
  wire [15 : 0] buffB_3_1_D_IN;
  wire buffB_3_1_EN;

  // register buffB_3_2
  reg [15 : 0] buffB_3_2;
  wire [15 : 0] buffB_3_2_D_IN;
  wire buffB_3_2_EN;

  // register buffB_3_3
  reg [15 : 0] buffB_3_3;
  wire [15 : 0] buffB_3_3_D_IN;
  wire buffB_3_3_EN;

  // register buffC_0_0
  reg [31 : 0] buffC_0_0;
  wire [31 : 0] buffC_0_0_D_IN;
  wire buffC_0_0_EN;

  // register buffC_0_1
  reg [31 : 0] buffC_0_1;
  wire [31 : 0] buffC_0_1_D_IN;
  wire buffC_0_1_EN;

  // register buffC_0_2
  reg [31 : 0] buffC_0_2;
  wire [31 : 0] buffC_0_2_D_IN;
  wire buffC_0_2_EN;

  // register buffC_0_3
  reg [31 : 0] buffC_0_3;
  wire [31 : 0] buffC_0_3_D_IN;
  wire buffC_0_3_EN;

  // register buffC_1_0
  reg [31 : 0] buffC_1_0;
  wire [31 : 0] buffC_1_0_D_IN;
  wire buffC_1_0_EN;

  // register buffC_1_1
  reg [31 : 0] buffC_1_1;
  wire [31 : 0] buffC_1_1_D_IN;
  wire buffC_1_1_EN;

  // register buffC_1_2
  reg [31 : 0] buffC_1_2;
  wire [31 : 0] buffC_1_2_D_IN;
  wire buffC_1_2_EN;

  // register buffC_1_3
  reg [31 : 0] buffC_1_3;
  wire [31 : 0] buffC_1_3_D_IN;
  wire buffC_1_3_EN;

  // register buffC_2_0
  reg [31 : 0] buffC_2_0;
  wire [31 : 0] buffC_2_0_D_IN;
  wire buffC_2_0_EN;

  // register buffC_2_1
  reg [31 : 0] buffC_2_1;
  wire [31 : 0] buffC_2_1_D_IN;
  wire buffC_2_1_EN;

  // register buffC_2_2
  reg [31 : 0] buffC_2_2;
  wire [31 : 0] buffC_2_2_D_IN;
  wire buffC_2_2_EN;

  // register buffC_2_3
  reg [31 : 0] buffC_2_3;
  wire [31 : 0] buffC_2_3_D_IN;
  wire buffC_2_3_EN;

  // register buffC_3_0
  reg [31 : 0] buffC_3_0;
  wire [31 : 0] buffC_3_0_D_IN;
  wire buffC_3_0_EN;

  // register buffC_3_1
  reg [31 : 0] buffC_3_1;
  wire [31 : 0] buffC_3_1_D_IN;
  wire buffC_3_1_EN;

  // register buffC_3_2
  reg [31 : 0] buffC_3_2;
  wire [31 : 0] buffC_3_2_D_IN;
  wire buffC_3_2_EN;

  // register buffC_3_3
  reg [31 : 0] buffC_3_3;
  wire [31 : 0] buffC_3_3_D_IN;
  wire buffC_3_3_EN;

  // register job_done
  reg job_done;
  wire job_done_D_IN, job_done_EN;

  // register regA
  reg [63 : 0] regA;
  wire [63 : 0] regA_D_IN;
  wire regA_EN;

  // register regB
  reg [63 : 0] regB;
  wire [63 : 0] regB_D_IN;
  wire regB_EN;

  // register regC
  reg [127 : 0] regC;
  wire [127 : 0] regC_D_IN;
  wire regC_EN;

  // register regS
  reg regS;
  wire regS_D_IN, regS_EN;

  // register what_to_do
  reg what_to_do;
  wire what_to_do_D_IN, what_to_do_EN;

  // ports of submodule unit_0_0
  wire [31 : 0] unit_0_0_getC, unit_0_0_putC_c;
  wire [15 : 0] unit_0_0_getA,
		unit_0_0_getB,
		unit_0_0_putA_a,
		unit_0_0_putB_b;
  wire unit_0_0_EN_putA,
       unit_0_0_EN_putB,
       unit_0_0_EN_putC,
       unit_0_0_EN_putS,
       unit_0_0_RDY_getA,
       unit_0_0_RDY_getB,
       unit_0_0_RDY_getC,
       unit_0_0_putS_s;

  // ports of submodule unit_0_1
  wire [31 : 0] unit_0_1_getC, unit_0_1_putC_c;
  wire [15 : 0] unit_0_1_getA,
		unit_0_1_getB,
		unit_0_1_putA_a,
		unit_0_1_putB_b;
  wire unit_0_1_EN_putA,
       unit_0_1_EN_putB,
       unit_0_1_EN_putC,
       unit_0_1_EN_putS,
       unit_0_1_RDY_getA,
       unit_0_1_RDY_getB,
       unit_0_1_RDY_getC,
       unit_0_1_putS_s;

  // ports of submodule unit_0_2
  wire [31 : 0] unit_0_2_getC, unit_0_2_putC_c;
  wire [15 : 0] unit_0_2_getA,
		unit_0_2_getB,
		unit_0_2_putA_a,
		unit_0_2_putB_b;
  wire unit_0_2_EN_putA,
       unit_0_2_EN_putB,
       unit_0_2_EN_putC,
       unit_0_2_EN_putS,
       unit_0_2_RDY_getA,
       unit_0_2_RDY_getB,
       unit_0_2_RDY_getC,
       unit_0_2_putS_s;

  // ports of submodule unit_0_3
  wire [31 : 0] unit_0_3_getC, unit_0_3_putC_c;
  wire [15 : 0] unit_0_3_getA,
		unit_0_3_getB,
		unit_0_3_putA_a,
		unit_0_3_putB_b;
  wire unit_0_3_EN_putA,
       unit_0_3_EN_putB,
       unit_0_3_EN_putC,
       unit_0_3_EN_putS,
       unit_0_3_RDY_getA,
       unit_0_3_RDY_getB,
       unit_0_3_RDY_getC,
       unit_0_3_putS_s;

  // ports of submodule unit_1_0
  wire [31 : 0] unit_1_0_getC, unit_1_0_putC_c;
  wire [15 : 0] unit_1_0_getA,
		unit_1_0_getB,
		unit_1_0_putA_a,
		unit_1_0_putB_b;
  wire unit_1_0_EN_putA,
       unit_1_0_EN_putB,
       unit_1_0_EN_putC,
       unit_1_0_EN_putS,
       unit_1_0_RDY_getA,
       unit_1_0_RDY_getB,
       unit_1_0_RDY_getC,
       unit_1_0_putS_s;

  // ports of submodule unit_1_1
  wire [31 : 0] unit_1_1_getC, unit_1_1_putC_c;
  wire [15 : 0] unit_1_1_getA,
		unit_1_1_getB,
		unit_1_1_putA_a,
		unit_1_1_putB_b;
  wire unit_1_1_EN_putA,
       unit_1_1_EN_putB,
       unit_1_1_EN_putC,
       unit_1_1_EN_putS,
       unit_1_1_RDY_getA,
       unit_1_1_RDY_getB,
       unit_1_1_RDY_getC,
       unit_1_1_putS_s;

  // ports of submodule unit_1_2
  wire [31 : 0] unit_1_2_getC, unit_1_2_putC_c;
  wire [15 : 0] unit_1_2_getA,
		unit_1_2_getB,
		unit_1_2_putA_a,
		unit_1_2_putB_b;
  wire unit_1_2_EN_putA,
       unit_1_2_EN_putB,
       unit_1_2_EN_putC,
       unit_1_2_EN_putS,
       unit_1_2_RDY_getA,
       unit_1_2_RDY_getB,
       unit_1_2_RDY_getC,
       unit_1_2_putS_s;

  // ports of submodule unit_1_3
  wire [31 : 0] unit_1_3_getC, unit_1_3_putC_c;
  wire [15 : 0] unit_1_3_getA,
		unit_1_3_getB,
		unit_1_3_putA_a,
		unit_1_3_putB_b;
  wire unit_1_3_EN_putA,
       unit_1_3_EN_putB,
       unit_1_3_EN_putC,
       unit_1_3_EN_putS,
       unit_1_3_RDY_getA,
       unit_1_3_RDY_getB,
       unit_1_3_RDY_getC,
       unit_1_3_putS_s;

  // ports of submodule unit_2_0
  wire [31 : 0] unit_2_0_getC, unit_2_0_putC_c;
  wire [15 : 0] unit_2_0_getA,
		unit_2_0_getB,
		unit_2_0_putA_a,
		unit_2_0_putB_b;
  wire unit_2_0_EN_putA,
       unit_2_0_EN_putB,
       unit_2_0_EN_putC,
       unit_2_0_EN_putS,
       unit_2_0_RDY_getA,
       unit_2_0_RDY_getB,
       unit_2_0_RDY_getC,
       unit_2_0_putS_s;

  // ports of submodule unit_2_1
  wire [31 : 0] unit_2_1_getC, unit_2_1_putC_c;
  wire [15 : 0] unit_2_1_getA,
		unit_2_1_getB,
		unit_2_1_putA_a,
		unit_2_1_putB_b;
  wire unit_2_1_EN_putA,
       unit_2_1_EN_putB,
       unit_2_1_EN_putC,
       unit_2_1_EN_putS,
       unit_2_1_RDY_getA,
       unit_2_1_RDY_getB,
       unit_2_1_RDY_getC,
       unit_2_1_putS_s;

  // ports of submodule unit_2_2
  wire [31 : 0] unit_2_2_getC, unit_2_2_putC_c;
  wire [15 : 0] unit_2_2_getA,
		unit_2_2_getB,
		unit_2_2_putA_a,
		unit_2_2_putB_b;
  wire unit_2_2_EN_putA,
       unit_2_2_EN_putB,
       unit_2_2_EN_putC,
       unit_2_2_EN_putS,
       unit_2_2_RDY_getA,
       unit_2_2_RDY_getB,
       unit_2_2_RDY_getC,
       unit_2_2_putS_s;

  // ports of submodule unit_2_3
  wire [31 : 0] unit_2_3_getC, unit_2_3_putC_c;
  wire [15 : 0] unit_2_3_getA,
		unit_2_3_getB,
		unit_2_3_putA_a,
		unit_2_3_putB_b;
  wire unit_2_3_EN_putA,
       unit_2_3_EN_putB,
       unit_2_3_EN_putC,
       unit_2_3_EN_putS,
       unit_2_3_RDY_getA,
       unit_2_3_RDY_getB,
       unit_2_3_RDY_getC,
       unit_2_3_putS_s;

  // ports of submodule unit_3_0
  wire [31 : 0] unit_3_0_getC, unit_3_0_putC_c;
  wire [15 : 0] unit_3_0_getA,
		unit_3_0_getB,
		unit_3_0_putA_a,
		unit_3_0_putB_b;
  wire unit_3_0_EN_putA,
       unit_3_0_EN_putB,
       unit_3_0_EN_putC,
       unit_3_0_EN_putS,
       unit_3_0_RDY_getA,
       unit_3_0_RDY_getB,
       unit_3_0_RDY_getC,
       unit_3_0_putS_s;

  // ports of submodule unit_3_1
  wire [31 : 0] unit_3_1_getC, unit_3_1_putC_c;
  wire [15 : 0] unit_3_1_getA,
		unit_3_1_getB,
		unit_3_1_putA_a,
		unit_3_1_putB_b;
  wire unit_3_1_EN_putA,
       unit_3_1_EN_putB,
       unit_3_1_EN_putC,
       unit_3_1_EN_putS,
       unit_3_1_RDY_getA,
       unit_3_1_RDY_getB,
       unit_3_1_RDY_getC,
       unit_3_1_putS_s;

  // ports of submodule unit_3_2
  wire [31 : 0] unit_3_2_getC, unit_3_2_putC_c;
  wire [15 : 0] unit_3_2_getA,
		unit_3_2_getB,
		unit_3_2_putA_a,
		unit_3_2_putB_b;
  wire unit_3_2_EN_putA,
       unit_3_2_EN_putB,
       unit_3_2_EN_putC,
       unit_3_2_EN_putS,
       unit_3_2_RDY_getA,
       unit_3_2_RDY_getB,
       unit_3_2_RDY_getC,
       unit_3_2_putS_s;

  // ports of submodule unit_3_3
  wire [31 : 0] unit_3_3_getC, unit_3_3_putC_c;
  wire [15 : 0] unit_3_3_getA,
		unit_3_3_getB,
		unit_3_3_putA_a,
		unit_3_3_putB_b;
  wire unit_3_3_EN_putA,
       unit_3_3_EN_putB,
       unit_3_3_EN_putC,
       unit_3_3_EN_putS,
       unit_3_3_RDY_getA,
       unit_3_3_RDY_getB,
       unit_3_3_RDY_getC,
       unit_3_3_putS_s;

  // rule scheduling signals
  wire CAN_FIRE_RL_inval,
       CAN_FIRE_RL_outval,
       CAN_FIRE_RL_what_to_do__dreg_update,
       CAN_FIRE_startP,
       WILL_FIRE_RL_inval,
       WILL_FIRE_RL_outval,
       WILL_FIRE_RL_what_to_do__dreg_update,
       WILL_FIRE_startP;

  // inputs to muxes for submodule ports
  wire MUX_unit_0_0_putB_1__SEL_1;

  // remaining internal signals
  wire b_filled_50_ULT_4___d151,
       unit_0_1_RDY_getA__1_AND_unit_0_2_RDY_getA__2__ETC___d81,
       unit_0_3_RDY_getB__9_AND_unit_1_0_RDY_getB__0__ETC___d63,
       unit_1_1_RDY_getC_AND_unit_1_2_RDY_getC__0_AND_ETC___d93,
       unit_1_3_RDY_getA__7_AND_unit_2_0_RDY_getA__8__ETC___d75,
       unit_2_1_RDY_getB__5_AND_unit_2_2_RDY_getB__6__ETC___d57,
       unit_2_3_RDY_getC__5_AND_unit_3_0_RDY_getC__6__ETC___d87,
       unit_3_1_RDY_getA__3_AND_unit_3_2_RDY_getA__4__ETC___d69;

  // action method startP
  assign RDY_startP = 1'd1 ;
  assign CAN_FIRE_startP = 1'd1 ;
  assign WILL_FIRE_startP = EN_startP ;

  // value method get_ans
  assign get_ans =
	     { unit_3_3_getC, unit_3_2_getC, unit_3_1_getC, unit_3_0_getC } ;
  assign RDY_get_ans =
	     unit_3_0_RDY_getC && unit_3_1_RDY_getC && unit_3_2_RDY_getC &&
	     unit_3_3_RDY_getC ;

  // value method outp_start
  assign outp_start = 1'd1 ;
  assign RDY_outp_start = b_filled > 4'd7 ;

  // submodule unit_0_0
  mkCell unit_0_0(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_0_0_putA_a),
		  .putB_b(unit_0_0_putB_b),
		  .putC_c(unit_0_0_putC_c),
		  .putS_s(unit_0_0_putS_s),
		  .EN_putA(unit_0_0_EN_putA),
		  .EN_putB(unit_0_0_EN_putB),
		  .EN_putC(unit_0_0_EN_putC),
		  .EN_putS(unit_0_0_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_0_0_getC),
		  .RDY_getC(unit_0_0_RDY_getC),
		  .getA(unit_0_0_getA),
		  .RDY_getA(unit_0_0_RDY_getA),
		  .getB(unit_0_0_getB),
		  .RDY_getB(unit_0_0_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_0_1
  mkCell unit_0_1(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_0_1_putA_a),
		  .putB_b(unit_0_1_putB_b),
		  .putC_c(unit_0_1_putC_c),
		  .putS_s(unit_0_1_putS_s),
		  .EN_putA(unit_0_1_EN_putA),
		  .EN_putB(unit_0_1_EN_putB),
		  .EN_putC(unit_0_1_EN_putC),
		  .EN_putS(unit_0_1_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_0_1_getC),
		  .RDY_getC(unit_0_1_RDY_getC),
		  .getA(unit_0_1_getA),
		  .RDY_getA(unit_0_1_RDY_getA),
		  .getB(unit_0_1_getB),
		  .RDY_getB(unit_0_1_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_0_2
  mkCell unit_0_2(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_0_2_putA_a),
		  .putB_b(unit_0_2_putB_b),
		  .putC_c(unit_0_2_putC_c),
		  .putS_s(unit_0_2_putS_s),
		  .EN_putA(unit_0_2_EN_putA),
		  .EN_putB(unit_0_2_EN_putB),
		  .EN_putC(unit_0_2_EN_putC),
		  .EN_putS(unit_0_2_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_0_2_getC),
		  .RDY_getC(unit_0_2_RDY_getC),
		  .getA(unit_0_2_getA),
		  .RDY_getA(unit_0_2_RDY_getA),
		  .getB(unit_0_2_getB),
		  .RDY_getB(unit_0_2_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_0_3
  mkCell unit_0_3(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_0_3_putA_a),
		  .putB_b(unit_0_3_putB_b),
		  .putC_c(unit_0_3_putC_c),
		  .putS_s(unit_0_3_putS_s),
		  .EN_putA(unit_0_3_EN_putA),
		  .EN_putB(unit_0_3_EN_putB),
		  .EN_putC(unit_0_3_EN_putC),
		  .EN_putS(unit_0_3_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_0_3_getC),
		  .RDY_getC(unit_0_3_RDY_getC),
		  .getA(unit_0_3_getA),
		  .RDY_getA(unit_0_3_RDY_getA),
		  .getB(unit_0_3_getB),
		  .RDY_getB(unit_0_3_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_1_0
  mkCell unit_1_0(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_1_0_putA_a),
		  .putB_b(unit_1_0_putB_b),
		  .putC_c(unit_1_0_putC_c),
		  .putS_s(unit_1_0_putS_s),
		  .EN_putA(unit_1_0_EN_putA),
		  .EN_putB(unit_1_0_EN_putB),
		  .EN_putC(unit_1_0_EN_putC),
		  .EN_putS(unit_1_0_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_1_0_getC),
		  .RDY_getC(unit_1_0_RDY_getC),
		  .getA(unit_1_0_getA),
		  .RDY_getA(unit_1_0_RDY_getA),
		  .getB(unit_1_0_getB),
		  .RDY_getB(unit_1_0_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_1_1
  mkCell unit_1_1(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_1_1_putA_a),
		  .putB_b(unit_1_1_putB_b),
		  .putC_c(unit_1_1_putC_c),
		  .putS_s(unit_1_1_putS_s),
		  .EN_putA(unit_1_1_EN_putA),
		  .EN_putB(unit_1_1_EN_putB),
		  .EN_putC(unit_1_1_EN_putC),
		  .EN_putS(unit_1_1_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_1_1_getC),
		  .RDY_getC(unit_1_1_RDY_getC),
		  .getA(unit_1_1_getA),
		  .RDY_getA(unit_1_1_RDY_getA),
		  .getB(unit_1_1_getB),
		  .RDY_getB(unit_1_1_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_1_2
  mkCell unit_1_2(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_1_2_putA_a),
		  .putB_b(unit_1_2_putB_b),
		  .putC_c(unit_1_2_putC_c),
		  .putS_s(unit_1_2_putS_s),
		  .EN_putA(unit_1_2_EN_putA),
		  .EN_putB(unit_1_2_EN_putB),
		  .EN_putC(unit_1_2_EN_putC),
		  .EN_putS(unit_1_2_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_1_2_getC),
		  .RDY_getC(unit_1_2_RDY_getC),
		  .getA(unit_1_2_getA),
		  .RDY_getA(unit_1_2_RDY_getA),
		  .getB(unit_1_2_getB),
		  .RDY_getB(unit_1_2_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_1_3
  mkCell unit_1_3(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_1_3_putA_a),
		  .putB_b(unit_1_3_putB_b),
		  .putC_c(unit_1_3_putC_c),
		  .putS_s(unit_1_3_putS_s),
		  .EN_putA(unit_1_3_EN_putA),
		  .EN_putB(unit_1_3_EN_putB),
		  .EN_putC(unit_1_3_EN_putC),
		  .EN_putS(unit_1_3_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_1_3_getC),
		  .RDY_getC(unit_1_3_RDY_getC),
		  .getA(unit_1_3_getA),
		  .RDY_getA(unit_1_3_RDY_getA),
		  .getB(unit_1_3_getB),
		  .RDY_getB(unit_1_3_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_2_0
  mkCell unit_2_0(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_2_0_putA_a),
		  .putB_b(unit_2_0_putB_b),
		  .putC_c(unit_2_0_putC_c),
		  .putS_s(unit_2_0_putS_s),
		  .EN_putA(unit_2_0_EN_putA),
		  .EN_putB(unit_2_0_EN_putB),
		  .EN_putC(unit_2_0_EN_putC),
		  .EN_putS(unit_2_0_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_2_0_getC),
		  .RDY_getC(unit_2_0_RDY_getC),
		  .getA(unit_2_0_getA),
		  .RDY_getA(unit_2_0_RDY_getA),
		  .getB(unit_2_0_getB),
		  .RDY_getB(unit_2_0_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_2_1
  mkCell unit_2_1(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_2_1_putA_a),
		  .putB_b(unit_2_1_putB_b),
		  .putC_c(unit_2_1_putC_c),
		  .putS_s(unit_2_1_putS_s),
		  .EN_putA(unit_2_1_EN_putA),
		  .EN_putB(unit_2_1_EN_putB),
		  .EN_putC(unit_2_1_EN_putC),
		  .EN_putS(unit_2_1_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_2_1_getC),
		  .RDY_getC(unit_2_1_RDY_getC),
		  .getA(unit_2_1_getA),
		  .RDY_getA(unit_2_1_RDY_getA),
		  .getB(unit_2_1_getB),
		  .RDY_getB(unit_2_1_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_2_2
  mkCell unit_2_2(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_2_2_putA_a),
		  .putB_b(unit_2_2_putB_b),
		  .putC_c(unit_2_2_putC_c),
		  .putS_s(unit_2_2_putS_s),
		  .EN_putA(unit_2_2_EN_putA),
		  .EN_putB(unit_2_2_EN_putB),
		  .EN_putC(unit_2_2_EN_putC),
		  .EN_putS(unit_2_2_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_2_2_getC),
		  .RDY_getC(unit_2_2_RDY_getC),
		  .getA(unit_2_2_getA),
		  .RDY_getA(unit_2_2_RDY_getA),
		  .getB(unit_2_2_getB),
		  .RDY_getB(unit_2_2_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_2_3
  mkCell unit_2_3(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_2_3_putA_a),
		  .putB_b(unit_2_3_putB_b),
		  .putC_c(unit_2_3_putC_c),
		  .putS_s(unit_2_3_putS_s),
		  .EN_putA(unit_2_3_EN_putA),
		  .EN_putB(unit_2_3_EN_putB),
		  .EN_putC(unit_2_3_EN_putC),
		  .EN_putS(unit_2_3_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_2_3_getC),
		  .RDY_getC(unit_2_3_RDY_getC),
		  .getA(unit_2_3_getA),
		  .RDY_getA(unit_2_3_RDY_getA),
		  .getB(unit_2_3_getB),
		  .RDY_getB(unit_2_3_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_3_0
  mkCell unit_3_0(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_3_0_putA_a),
		  .putB_b(unit_3_0_putB_b),
		  .putC_c(unit_3_0_putC_c),
		  .putS_s(unit_3_0_putS_s),
		  .EN_putA(unit_3_0_EN_putA),
		  .EN_putB(unit_3_0_EN_putB),
		  .EN_putC(unit_3_0_EN_putC),
		  .EN_putS(unit_3_0_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_3_0_getC),
		  .RDY_getC(unit_3_0_RDY_getC),
		  .getA(unit_3_0_getA),
		  .RDY_getA(unit_3_0_RDY_getA),
		  .getB(unit_3_0_getB),
		  .RDY_getB(unit_3_0_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_3_1
  mkCell unit_3_1(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_3_1_putA_a),
		  .putB_b(unit_3_1_putB_b),
		  .putC_c(unit_3_1_putC_c),
		  .putS_s(unit_3_1_putS_s),
		  .EN_putA(unit_3_1_EN_putA),
		  .EN_putB(unit_3_1_EN_putB),
		  .EN_putC(unit_3_1_EN_putC),
		  .EN_putS(unit_3_1_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_3_1_getC),
		  .RDY_getC(unit_3_1_RDY_getC),
		  .getA(unit_3_1_getA),
		  .RDY_getA(unit_3_1_RDY_getA),
		  .getB(unit_3_1_getB),
		  .RDY_getB(unit_3_1_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_3_2
  mkCell unit_3_2(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_3_2_putA_a),
		  .putB_b(unit_3_2_putB_b),
		  .putC_c(unit_3_2_putC_c),
		  .putS_s(unit_3_2_putS_s),
		  .EN_putA(unit_3_2_EN_putA),
		  .EN_putB(unit_3_2_EN_putB),
		  .EN_putC(unit_3_2_EN_putC),
		  .EN_putS(unit_3_2_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_3_2_getC),
		  .RDY_getC(unit_3_2_RDY_getC),
		  .getA(unit_3_2_getA),
		  .RDY_getA(unit_3_2_RDY_getA),
		  .getB(unit_3_2_getB),
		  .RDY_getB(unit_3_2_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // submodule unit_3_3
  mkCell unit_3_3(.CLK(CLK),
		  .RST_N(RST_N),
		  .putA_a(unit_3_3_putA_a),
		  .putB_b(unit_3_3_putB_b),
		  .putC_c(unit_3_3_putC_c),
		  .putS_s(unit_3_3_putS_s),
		  .EN_putA(unit_3_3_EN_putA),
		  .EN_putB(unit_3_3_EN_putB),
		  .EN_putC(unit_3_3_EN_putC),
		  .EN_putS(unit_3_3_EN_putS),
		  .RDY_putA(),
		  .RDY_putB(),
		  .RDY_putC(),
		  .RDY_putS(),
		  .getC(unit_3_3_getC),
		  .RDY_getC(unit_3_3_RDY_getC),
		  .getA(unit_3_3_getA),
		  .RDY_getA(unit_3_3_RDY_getA),
		  .getB(unit_3_3_getB),
		  .RDY_getB(unit_3_3_RDY_getB),
		  .getS(),
		  .RDY_getS(),
		  .ans_ready(),
		  .RDY_ans_ready());

  // rule RL_outval
  assign CAN_FIRE_RL_outval =
	     unit_0_0_RDY_getC && unit_0_1_RDY_getC && unit_0_2_RDY_getC &&
	     unit_0_3_RDY_getC &&
	     unit_1_0_RDY_getC &&
	     unit_1_1_RDY_getC_AND_unit_1_2_RDY_getC__0_AND_ETC___d93 &&
	     !what_to_do ;
  assign WILL_FIRE_RL_outval = CAN_FIRE_RL_outval ;

  // rule RL_inval
  assign CAN_FIRE_RL_inval = what_to_do ;
  assign WILL_FIRE_RL_inval = what_to_do ;

  // rule RL_what_to_do__dreg_update
  assign CAN_FIRE_RL_what_to_do__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_what_to_do__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_unit_0_0_putB_1__SEL_1 = EN_startP && b_filled_50_ULT_4___d151 ;

  // register b_filled
  assign b_filled_D_IN = b_filled + 4'd1 ;
  assign b_filled_EN = EN_startP ;

  // register buffA_0_0
  assign buffA_0_0_D_IN = unit_0_0_getA ;
  assign buffA_0_0_EN = CAN_FIRE_RL_outval ;

  // register buffA_0_1
  assign buffA_0_1_D_IN = unit_0_1_getA ;
  assign buffA_0_1_EN = CAN_FIRE_RL_outval ;

  // register buffA_0_2
  assign buffA_0_2_D_IN = unit_0_2_getA ;
  assign buffA_0_2_EN = CAN_FIRE_RL_outval ;

  // register buffA_0_3
  assign buffA_0_3_D_IN = unit_0_3_getA ;
  assign buffA_0_3_EN = CAN_FIRE_RL_outval ;

  // register buffA_1_0
  assign buffA_1_0_D_IN = unit_1_0_getA ;
  assign buffA_1_0_EN = CAN_FIRE_RL_outval ;

  // register buffA_1_1
  assign buffA_1_1_D_IN = unit_1_1_getA ;
  assign buffA_1_1_EN = CAN_FIRE_RL_outval ;

  // register buffA_1_2
  assign buffA_1_2_D_IN = unit_1_2_getA ;
  assign buffA_1_2_EN = CAN_FIRE_RL_outval ;

  // register buffA_1_3
  assign buffA_1_3_D_IN = unit_1_3_getA ;
  assign buffA_1_3_EN = CAN_FIRE_RL_outval ;

  // register buffA_2_0
  assign buffA_2_0_D_IN = unit_2_0_getA ;
  assign buffA_2_0_EN = CAN_FIRE_RL_outval ;

  // register buffA_2_1
  assign buffA_2_1_D_IN = unit_2_1_getA ;
  assign buffA_2_1_EN = CAN_FIRE_RL_outval ;

  // register buffA_2_2
  assign buffA_2_2_D_IN = unit_2_2_getA ;
  assign buffA_2_2_EN = CAN_FIRE_RL_outval ;

  // register buffA_2_3
  assign buffA_2_3_D_IN = unit_2_3_getA ;
  assign buffA_2_3_EN = CAN_FIRE_RL_outval ;

  // register buffA_3_0
  assign buffA_3_0_D_IN = unit_3_0_getA ;
  assign buffA_3_0_EN = CAN_FIRE_RL_outval ;

  // register buffA_3_1
  assign buffA_3_1_D_IN = unit_3_1_getA ;
  assign buffA_3_1_EN = CAN_FIRE_RL_outval ;

  // register buffA_3_2
  assign buffA_3_2_D_IN = unit_3_2_getA ;
  assign buffA_3_2_EN = CAN_FIRE_RL_outval ;

  // register buffA_3_3
  assign buffA_3_3_D_IN = unit_3_3_getA ;
  assign buffA_3_3_EN = CAN_FIRE_RL_outval ;

  // register buffB_0_0
  assign buffB_0_0_D_IN = unit_0_0_getB ;
  assign buffB_0_0_EN = CAN_FIRE_RL_outval ;

  // register buffB_0_1
  assign buffB_0_1_D_IN = unit_0_1_getB ;
  assign buffB_0_1_EN = CAN_FIRE_RL_outval ;

  // register buffB_0_2
  assign buffB_0_2_D_IN = unit_0_2_getB ;
  assign buffB_0_2_EN = CAN_FIRE_RL_outval ;

  // register buffB_0_3
  assign buffB_0_3_D_IN = unit_0_3_getB ;
  assign buffB_0_3_EN = CAN_FIRE_RL_outval ;

  // register buffB_1_0
  assign buffB_1_0_D_IN = unit_1_0_getB ;
  assign buffB_1_0_EN = CAN_FIRE_RL_outval ;

  // register buffB_1_1
  assign buffB_1_1_D_IN = unit_1_1_getB ;
  assign buffB_1_1_EN = CAN_FIRE_RL_outval ;

  // register buffB_1_2
  assign buffB_1_2_D_IN = unit_1_2_getB ;
  assign buffB_1_2_EN = CAN_FIRE_RL_outval ;

  // register buffB_1_3
  assign buffB_1_3_D_IN = unit_1_3_getB ;
  assign buffB_1_3_EN = CAN_FIRE_RL_outval ;

  // register buffB_2_0
  assign buffB_2_0_D_IN = unit_2_0_getB ;
  assign buffB_2_0_EN = CAN_FIRE_RL_outval ;

  // register buffB_2_1
  assign buffB_2_1_D_IN = unit_2_1_getB ;
  assign buffB_2_1_EN = CAN_FIRE_RL_outval ;

  // register buffB_2_2
  assign buffB_2_2_D_IN = unit_2_2_getB ;
  assign buffB_2_2_EN = CAN_FIRE_RL_outval ;

  // register buffB_2_3
  assign buffB_2_3_D_IN = unit_2_3_getB ;
  assign buffB_2_3_EN = CAN_FIRE_RL_outval ;

  // register buffB_3_0
  assign buffB_3_0_D_IN = unit_3_0_getB ;
  assign buffB_3_0_EN = CAN_FIRE_RL_outval ;

  // register buffB_3_1
  assign buffB_3_1_D_IN = unit_3_1_getB ;
  assign buffB_3_1_EN = CAN_FIRE_RL_outval ;

  // register buffB_3_2
  assign buffB_3_2_D_IN = unit_3_2_getB ;
  assign buffB_3_2_EN = CAN_FIRE_RL_outval ;

  // register buffB_3_3
  assign buffB_3_3_D_IN = unit_3_3_getB ;
  assign buffB_3_3_EN = CAN_FIRE_RL_outval ;

  // register buffC_0_0
  assign buffC_0_0_D_IN = unit_0_0_getC ;
  assign buffC_0_0_EN = CAN_FIRE_RL_outval ;

  // register buffC_0_1
  assign buffC_0_1_D_IN = unit_0_1_getC ;
  assign buffC_0_1_EN = CAN_FIRE_RL_outval ;

  // register buffC_0_2
  assign buffC_0_2_D_IN = unit_0_2_getC ;
  assign buffC_0_2_EN = CAN_FIRE_RL_outval ;

  // register buffC_0_3
  assign buffC_0_3_D_IN = unit_0_3_getC ;
  assign buffC_0_3_EN = CAN_FIRE_RL_outval ;

  // register buffC_1_0
  assign buffC_1_0_D_IN = unit_1_0_getC ;
  assign buffC_1_0_EN = CAN_FIRE_RL_outval ;

  // register buffC_1_1
  assign buffC_1_1_D_IN = unit_1_1_getC ;
  assign buffC_1_1_EN = CAN_FIRE_RL_outval ;

  // register buffC_1_2
  assign buffC_1_2_D_IN = unit_1_2_getC ;
  assign buffC_1_2_EN = CAN_FIRE_RL_outval ;

  // register buffC_1_3
  assign buffC_1_3_D_IN = unit_1_3_getC ;
  assign buffC_1_3_EN = CAN_FIRE_RL_outval ;

  // register buffC_2_0
  assign buffC_2_0_D_IN = unit_2_0_getC ;
  assign buffC_2_0_EN = CAN_FIRE_RL_outval ;

  // register buffC_2_1
  assign buffC_2_1_D_IN = unit_2_1_getC ;
  assign buffC_2_1_EN = CAN_FIRE_RL_outval ;

  // register buffC_2_2
  assign buffC_2_2_D_IN = unit_2_2_getC ;
  assign buffC_2_2_EN = CAN_FIRE_RL_outval ;

  // register buffC_2_3
  assign buffC_2_3_D_IN = unit_2_3_getC ;
  assign buffC_2_3_EN = CAN_FIRE_RL_outval ;

  // register buffC_3_0
  assign buffC_3_0_D_IN = unit_3_0_getC ;
  assign buffC_3_0_EN = CAN_FIRE_RL_outval ;

  // register buffC_3_1
  assign buffC_3_1_D_IN = unit_3_1_getC ;
  assign buffC_3_1_EN = CAN_FIRE_RL_outval ;

  // register buffC_3_2
  assign buffC_3_2_D_IN = unit_3_2_getC ;
  assign buffC_3_2_EN = CAN_FIRE_RL_outval ;

  // register buffC_3_3
  assign buffC_3_3_D_IN = unit_3_3_getC ;
  assign buffC_3_3_EN = CAN_FIRE_RL_outval ;

  // register job_done
  assign job_done_D_IN = 1'b0 ;
  assign job_done_EN = 1'b0 ;

  // register regA
  assign regA_D_IN = startP_a ;
  assign regA_EN = EN_startP ;

  // register regB
  assign regB_D_IN = startP_b ;
  assign regB_EN = EN_startP ;

  // register regC
  assign regC_D_IN = 128'h0 ;
  assign regC_EN = 1'b0 ;

  // register regS
  assign regS_D_IN = startP_s ;
  assign regS_EN = EN_startP ;

  // register what_to_do
  assign what_to_do_D_IN = CAN_FIRE_RL_outval ;
  assign what_to_do_EN = 1'd1 ;

  // submodule unit_0_0
  assign unit_0_0_putA_a = regA[15:0] ;
  assign unit_0_0_putB_b =
	     MUX_unit_0_0_putB_1__SEL_1 ? regB[15:0] : buffB_0_0 ;
  assign unit_0_0_putC_c = 32'b0 ;
  assign unit_0_0_putS_s = regS ;
  assign unit_0_0_EN_putA = EN_startP ;
  assign unit_0_0_EN_putB =
	     EN_startP && b_filled_50_ULT_4___d151 ||
	     what_to_do && !b_filled_50_ULT_4___d151 ;
  assign unit_0_0_EN_putC = EN_startP ;
  assign unit_0_0_EN_putS = EN_startP ;

  // submodule unit_0_1
  assign unit_0_1_putA_a = buffA_0_0 ;
  assign unit_0_1_putB_b =
	     MUX_unit_0_0_putB_1__SEL_1 ? regB[31:16] : buffB_0_1 ;
  assign unit_0_1_putC_c = 32'b0 ;
  assign unit_0_1_putS_s = regS ;
  assign unit_0_1_EN_putA = what_to_do ;
  assign unit_0_1_EN_putB =
	     EN_startP && b_filled_50_ULT_4___d151 ||
	     what_to_do && !b_filled_50_ULT_4___d151 ;
  assign unit_0_1_EN_putC = EN_startP ;
  assign unit_0_1_EN_putS = EN_startP ;

  // submodule unit_0_2
  assign unit_0_2_putA_a = buffA_0_1 ;
  assign unit_0_2_putB_b =
	     MUX_unit_0_0_putB_1__SEL_1 ? regB[47:32] : buffB_0_2 ;
  assign unit_0_2_putC_c = 32'b0 ;
  assign unit_0_2_putS_s = regS ;
  assign unit_0_2_EN_putA = what_to_do ;
  assign unit_0_2_EN_putB =
	     EN_startP && b_filled_50_ULT_4___d151 ||
	     what_to_do && !b_filled_50_ULT_4___d151 ;
  assign unit_0_2_EN_putC = EN_startP ;
  assign unit_0_2_EN_putS = EN_startP ;

  // submodule unit_0_3
  assign unit_0_3_putA_a = buffA_0_2 ;
  assign unit_0_3_putB_b =
	     MUX_unit_0_0_putB_1__SEL_1 ? regB[63:48] : buffB_0_3 ;
  assign unit_0_3_putC_c = 32'b0 ;
  assign unit_0_3_putS_s = regS ;
  assign unit_0_3_EN_putA = what_to_do ;
  assign unit_0_3_EN_putB =
	     EN_startP && b_filled_50_ULT_4___d151 ||
	     what_to_do && !b_filled_50_ULT_4___d151 ;
  assign unit_0_3_EN_putC = EN_startP ;
  assign unit_0_3_EN_putS = EN_startP ;

  // submodule unit_1_0
  assign unit_1_0_putA_a = regA[31:16] ;
  assign unit_1_0_putB_b = b_filled_50_ULT_4___d151 ? buffB_0_0 : buffB_1_0 ;
  assign unit_1_0_putC_c = buffC_0_0 ;
  assign unit_1_0_putS_s = regS ;
  assign unit_1_0_EN_putA = EN_startP ;
  assign unit_1_0_EN_putB = what_to_do ;
  assign unit_1_0_EN_putC = what_to_do ;
  assign unit_1_0_EN_putS = EN_startP ;

  // submodule unit_1_1
  assign unit_1_1_putA_a = buffA_1_0 ;
  assign unit_1_1_putB_b = b_filled_50_ULT_4___d151 ? buffB_0_1 : buffB_1_1 ;
  assign unit_1_1_putC_c = buffC_0_1 ;
  assign unit_1_1_putS_s = regS ;
  assign unit_1_1_EN_putA = what_to_do ;
  assign unit_1_1_EN_putB = what_to_do ;
  assign unit_1_1_EN_putC = what_to_do ;
  assign unit_1_1_EN_putS = EN_startP ;

  // submodule unit_1_2
  assign unit_1_2_putA_a = buffA_1_1 ;
  assign unit_1_2_putB_b = b_filled_50_ULT_4___d151 ? buffB_0_2 : buffB_1_2 ;
  assign unit_1_2_putC_c = buffC_0_2 ;
  assign unit_1_2_putS_s = regS ;
  assign unit_1_2_EN_putA = what_to_do ;
  assign unit_1_2_EN_putB = what_to_do ;
  assign unit_1_2_EN_putC = what_to_do ;
  assign unit_1_2_EN_putS = EN_startP ;

  // submodule unit_1_3
  assign unit_1_3_putA_a = buffA_1_2 ;
  assign unit_1_3_putB_b = b_filled_50_ULT_4___d151 ? buffB_0_3 : buffB_1_3 ;
  assign unit_1_3_putC_c = buffC_0_3 ;
  assign unit_1_3_putS_s = regS ;
  assign unit_1_3_EN_putA = what_to_do ;
  assign unit_1_3_EN_putB = what_to_do ;
  assign unit_1_3_EN_putC = what_to_do ;
  assign unit_1_3_EN_putS = EN_startP ;

  // submodule unit_2_0
  assign unit_2_0_putA_a = regA[47:32] ;
  assign unit_2_0_putB_b = b_filled_50_ULT_4___d151 ? buffB_1_0 : buffB_2_0 ;
  assign unit_2_0_putC_c = buffC_1_0 ;
  assign unit_2_0_putS_s = regS ;
  assign unit_2_0_EN_putA = EN_startP ;
  assign unit_2_0_EN_putB = what_to_do ;
  assign unit_2_0_EN_putC = what_to_do ;
  assign unit_2_0_EN_putS = EN_startP ;

  // submodule unit_2_1
  assign unit_2_1_putA_a = buffA_2_0 ;
  assign unit_2_1_putB_b = b_filled_50_ULT_4___d151 ? buffB_1_1 : buffB_2_1 ;
  assign unit_2_1_putC_c = buffC_1_1 ;
  assign unit_2_1_putS_s = regS ;
  assign unit_2_1_EN_putA = what_to_do ;
  assign unit_2_1_EN_putB = what_to_do ;
  assign unit_2_1_EN_putC = what_to_do ;
  assign unit_2_1_EN_putS = EN_startP ;

  // submodule unit_2_2
  assign unit_2_2_putA_a = buffA_2_1 ;
  assign unit_2_2_putB_b = b_filled_50_ULT_4___d151 ? buffB_1_2 : buffB_2_2 ;
  assign unit_2_2_putC_c = buffC_1_2 ;
  assign unit_2_2_putS_s = regS ;
  assign unit_2_2_EN_putA = what_to_do ;
  assign unit_2_2_EN_putB = what_to_do ;
  assign unit_2_2_EN_putC = what_to_do ;
  assign unit_2_2_EN_putS = EN_startP ;

  // submodule unit_2_3
  assign unit_2_3_putA_a = buffA_2_2 ;
  assign unit_2_3_putB_b = b_filled_50_ULT_4___d151 ? buffB_1_3 : buffB_2_3 ;
  assign unit_2_3_putC_c = buffC_1_3 ;
  assign unit_2_3_putS_s = regS ;
  assign unit_2_3_EN_putA = what_to_do ;
  assign unit_2_3_EN_putB = what_to_do ;
  assign unit_2_3_EN_putC = what_to_do ;
  assign unit_2_3_EN_putS = EN_startP ;

  // submodule unit_3_0
  assign unit_3_0_putA_a = regA[63:48] ;
  assign unit_3_0_putB_b = b_filled_50_ULT_4___d151 ? buffB_2_0 : buffB_3_0 ;
  assign unit_3_0_putC_c = buffC_2_0 ;
  assign unit_3_0_putS_s = regS ;
  assign unit_3_0_EN_putA = EN_startP ;
  assign unit_3_0_EN_putB = what_to_do ;
  assign unit_3_0_EN_putC = what_to_do ;
  assign unit_3_0_EN_putS = EN_startP ;

  // submodule unit_3_1
  assign unit_3_1_putA_a = buffA_3_0 ;
  assign unit_3_1_putB_b = b_filled_50_ULT_4___d151 ? buffB_2_1 : buffB_3_1 ;
  assign unit_3_1_putC_c = buffC_2_1 ;
  assign unit_3_1_putS_s = regS ;
  assign unit_3_1_EN_putA = what_to_do ;
  assign unit_3_1_EN_putB = what_to_do ;
  assign unit_3_1_EN_putC = what_to_do ;
  assign unit_3_1_EN_putS = EN_startP ;

  // submodule unit_3_2
  assign unit_3_2_putA_a = buffA_3_1 ;
  assign unit_3_2_putB_b = b_filled_50_ULT_4___d151 ? buffB_2_2 : buffB_3_2 ;
  assign unit_3_2_putC_c = buffC_2_2 ;
  assign unit_3_2_putS_s = regS ;
  assign unit_3_2_EN_putA = what_to_do ;
  assign unit_3_2_EN_putB = what_to_do ;
  assign unit_3_2_EN_putC = what_to_do ;
  assign unit_3_2_EN_putS = EN_startP ;

  // submodule unit_3_3
  assign unit_3_3_putA_a = buffA_3_2 ;
  assign unit_3_3_putB_b = b_filled_50_ULT_4___d151 ? buffB_2_3 : buffB_3_3 ;
  assign unit_3_3_putC_c = buffC_2_3 ;
  assign unit_3_3_putS_s = regS ;
  assign unit_3_3_EN_putA = what_to_do ;
  assign unit_3_3_EN_putB = what_to_do ;
  assign unit_3_3_EN_putC = what_to_do ;
  assign unit_3_3_EN_putS = EN_startP ;

  // remaining internal signals
  assign b_filled_50_ULT_4___d151 = b_filled < 4'd4 ;
  assign unit_0_1_RDY_getA__1_AND_unit_0_2_RDY_getA__2__ETC___d81 =
	     unit_0_1_RDY_getA && unit_0_2_RDY_getA && unit_0_3_RDY_getA &&
	     unit_1_0_RDY_getA &&
	     unit_1_1_RDY_getA &&
	     unit_1_2_RDY_getA &&
	     unit_1_3_RDY_getA__7_AND_unit_2_0_RDY_getA__8__ETC___d75 ;
  assign unit_0_3_RDY_getB__9_AND_unit_1_0_RDY_getB__0__ETC___d63 =
	     unit_0_3_RDY_getB && unit_1_0_RDY_getB && unit_1_1_RDY_getB &&
	     unit_1_2_RDY_getB &&
	     unit_1_3_RDY_getB &&
	     unit_2_0_RDY_getB &&
	     unit_2_1_RDY_getB__5_AND_unit_2_2_RDY_getB__6__ETC___d57 ;
  assign unit_1_1_RDY_getC_AND_unit_1_2_RDY_getC__0_AND_ETC___d93 =
	     unit_1_1_RDY_getC && unit_1_2_RDY_getC && unit_1_3_RDY_getC &&
	     unit_2_0_RDY_getC &&
	     unit_2_1_RDY_getC &&
	     unit_2_2_RDY_getC &&
	     unit_2_3_RDY_getC__5_AND_unit_3_0_RDY_getC__6__ETC___d87 ;
  assign unit_1_3_RDY_getA__7_AND_unit_2_0_RDY_getA__8__ETC___d75 =
	     unit_1_3_RDY_getA && unit_2_0_RDY_getA && unit_2_1_RDY_getA &&
	     unit_2_2_RDY_getA &&
	     unit_2_3_RDY_getA &&
	     unit_3_0_RDY_getA &&
	     unit_3_1_RDY_getA__3_AND_unit_3_2_RDY_getA__4__ETC___d69 ;
  assign unit_2_1_RDY_getB__5_AND_unit_2_2_RDY_getB__6__ETC___d57 =
	     unit_2_1_RDY_getB && unit_2_2_RDY_getB && unit_2_3_RDY_getB &&
	     unit_3_0_RDY_getB &&
	     unit_3_1_RDY_getB &&
	     unit_3_2_RDY_getB &&
	     unit_3_3_RDY_getB ;
  assign unit_2_3_RDY_getC__5_AND_unit_3_0_RDY_getC__6__ETC___d87 =
	     unit_2_3_RDY_getC && unit_3_0_RDY_getC && unit_3_1_RDY_getC &&
	     unit_3_2_RDY_getC &&
	     unit_3_3_RDY_getC &&
	     unit_0_0_RDY_getA &&
	     unit_0_1_RDY_getA__1_AND_unit_0_2_RDY_getA__2__ETC___d81 ;
  assign unit_3_1_RDY_getA__3_AND_unit_3_2_RDY_getA__4__ETC___d69 =
	     unit_3_1_RDY_getA && unit_3_2_RDY_getA && unit_3_3_RDY_getA &&
	     unit_0_0_RDY_getB &&
	     unit_0_1_RDY_getB &&
	     unit_0_2_RDY_getB &&
	     unit_0_3_RDY_getB__9_AND_unit_1_0_RDY_getB__0__ETC___d63 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        b_filled <= `BSV_ASSIGNMENT_DELAY 4'd0;
	buffA_0_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_0_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_0_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_0_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_1_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_1_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_2_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_2_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_2_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_2_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_3_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_3_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_3_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffA_3_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_0_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_0_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_0_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_0_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_1_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_1_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_2_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_2_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_2_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_2_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_3_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_3_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_3_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffB_3_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	buffC_0_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_0_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_0_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_0_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_1_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_1_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_1_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_1_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_2_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_2_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_2_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_2_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_3_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_3_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_3_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	buffC_3_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	job_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	regA <= `BSV_ASSIGNMENT_DELAY 64'd0;
	regB <= `BSV_ASSIGNMENT_DELAY 64'd0;
	regC <= `BSV_ASSIGNMENT_DELAY 128'd0;
	regS <= `BSV_ASSIGNMENT_DELAY 1'd0;
	what_to_do <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (b_filled_EN) b_filled <= `BSV_ASSIGNMENT_DELAY b_filled_D_IN;
	if (buffA_0_0_EN) buffA_0_0 <= `BSV_ASSIGNMENT_DELAY buffA_0_0_D_IN;
	if (buffA_0_1_EN) buffA_0_1 <= `BSV_ASSIGNMENT_DELAY buffA_0_1_D_IN;
	if (buffA_0_2_EN) buffA_0_2 <= `BSV_ASSIGNMENT_DELAY buffA_0_2_D_IN;
	if (buffA_0_3_EN) buffA_0_3 <= `BSV_ASSIGNMENT_DELAY buffA_0_3_D_IN;
	if (buffA_1_0_EN) buffA_1_0 <= `BSV_ASSIGNMENT_DELAY buffA_1_0_D_IN;
	if (buffA_1_1_EN) buffA_1_1 <= `BSV_ASSIGNMENT_DELAY buffA_1_1_D_IN;
	if (buffA_1_2_EN) buffA_1_2 <= `BSV_ASSIGNMENT_DELAY buffA_1_2_D_IN;
	if (buffA_1_3_EN) buffA_1_3 <= `BSV_ASSIGNMENT_DELAY buffA_1_3_D_IN;
	if (buffA_2_0_EN) buffA_2_0 <= `BSV_ASSIGNMENT_DELAY buffA_2_0_D_IN;
	if (buffA_2_1_EN) buffA_2_1 <= `BSV_ASSIGNMENT_DELAY buffA_2_1_D_IN;
	if (buffA_2_2_EN) buffA_2_2 <= `BSV_ASSIGNMENT_DELAY buffA_2_2_D_IN;
	if (buffA_2_3_EN) buffA_2_3 <= `BSV_ASSIGNMENT_DELAY buffA_2_3_D_IN;
	if (buffA_3_0_EN) buffA_3_0 <= `BSV_ASSIGNMENT_DELAY buffA_3_0_D_IN;
	if (buffA_3_1_EN) buffA_3_1 <= `BSV_ASSIGNMENT_DELAY buffA_3_1_D_IN;
	if (buffA_3_2_EN) buffA_3_2 <= `BSV_ASSIGNMENT_DELAY buffA_3_2_D_IN;
	if (buffA_3_3_EN) buffA_3_3 <= `BSV_ASSIGNMENT_DELAY buffA_3_3_D_IN;
	if (buffB_0_0_EN) buffB_0_0 <= `BSV_ASSIGNMENT_DELAY buffB_0_0_D_IN;
	if (buffB_0_1_EN) buffB_0_1 <= `BSV_ASSIGNMENT_DELAY buffB_0_1_D_IN;
	if (buffB_0_2_EN) buffB_0_2 <= `BSV_ASSIGNMENT_DELAY buffB_0_2_D_IN;
	if (buffB_0_3_EN) buffB_0_3 <= `BSV_ASSIGNMENT_DELAY buffB_0_3_D_IN;
	if (buffB_1_0_EN) buffB_1_0 <= `BSV_ASSIGNMENT_DELAY buffB_1_0_D_IN;
	if (buffB_1_1_EN) buffB_1_1 <= `BSV_ASSIGNMENT_DELAY buffB_1_1_D_IN;
	if (buffB_1_2_EN) buffB_1_2 <= `BSV_ASSIGNMENT_DELAY buffB_1_2_D_IN;
	if (buffB_1_3_EN) buffB_1_3 <= `BSV_ASSIGNMENT_DELAY buffB_1_3_D_IN;
	if (buffB_2_0_EN) buffB_2_0 <= `BSV_ASSIGNMENT_DELAY buffB_2_0_D_IN;
	if (buffB_2_1_EN) buffB_2_1 <= `BSV_ASSIGNMENT_DELAY buffB_2_1_D_IN;
	if (buffB_2_2_EN) buffB_2_2 <= `BSV_ASSIGNMENT_DELAY buffB_2_2_D_IN;
	if (buffB_2_3_EN) buffB_2_3 <= `BSV_ASSIGNMENT_DELAY buffB_2_3_D_IN;
	if (buffB_3_0_EN) buffB_3_0 <= `BSV_ASSIGNMENT_DELAY buffB_3_0_D_IN;
	if (buffB_3_1_EN) buffB_3_1 <= `BSV_ASSIGNMENT_DELAY buffB_3_1_D_IN;
	if (buffB_3_2_EN) buffB_3_2 <= `BSV_ASSIGNMENT_DELAY buffB_3_2_D_IN;
	if (buffB_3_3_EN) buffB_3_3 <= `BSV_ASSIGNMENT_DELAY buffB_3_3_D_IN;
	if (buffC_0_0_EN) buffC_0_0 <= `BSV_ASSIGNMENT_DELAY buffC_0_0_D_IN;
	if (buffC_0_1_EN) buffC_0_1 <= `BSV_ASSIGNMENT_DELAY buffC_0_1_D_IN;
	if (buffC_0_2_EN) buffC_0_2 <= `BSV_ASSIGNMENT_DELAY buffC_0_2_D_IN;
	if (buffC_0_3_EN) buffC_0_3 <= `BSV_ASSIGNMENT_DELAY buffC_0_3_D_IN;
	if (buffC_1_0_EN) buffC_1_0 <= `BSV_ASSIGNMENT_DELAY buffC_1_0_D_IN;
	if (buffC_1_1_EN) buffC_1_1 <= `BSV_ASSIGNMENT_DELAY buffC_1_1_D_IN;
	if (buffC_1_2_EN) buffC_1_2 <= `BSV_ASSIGNMENT_DELAY buffC_1_2_D_IN;
	if (buffC_1_3_EN) buffC_1_3 <= `BSV_ASSIGNMENT_DELAY buffC_1_3_D_IN;
	if (buffC_2_0_EN) buffC_2_0 <= `BSV_ASSIGNMENT_DELAY buffC_2_0_D_IN;
	if (buffC_2_1_EN) buffC_2_1 <= `BSV_ASSIGNMENT_DELAY buffC_2_1_D_IN;
	if (buffC_2_2_EN) buffC_2_2 <= `BSV_ASSIGNMENT_DELAY buffC_2_2_D_IN;
	if (buffC_2_3_EN) buffC_2_3 <= `BSV_ASSIGNMENT_DELAY buffC_2_3_D_IN;
	if (buffC_3_0_EN) buffC_3_0 <= `BSV_ASSIGNMENT_DELAY buffC_3_0_D_IN;
	if (buffC_3_1_EN) buffC_3_1 <= `BSV_ASSIGNMENT_DELAY buffC_3_1_D_IN;
	if (buffC_3_2_EN) buffC_3_2 <= `BSV_ASSIGNMENT_DELAY buffC_3_2_D_IN;
	if (buffC_3_3_EN) buffC_3_3 <= `BSV_ASSIGNMENT_DELAY buffC_3_3_D_IN;
	if (job_done_EN) job_done <= `BSV_ASSIGNMENT_DELAY job_done_D_IN;
	if (regA_EN) regA <= `BSV_ASSIGNMENT_DELAY regA_D_IN;
	if (regB_EN) regB <= `BSV_ASSIGNMENT_DELAY regB_D_IN;
	if (regC_EN) regC <= `BSV_ASSIGNMENT_DELAY regC_D_IN;
	if (regS_EN) regS <= `BSV_ASSIGNMENT_DELAY regS_D_IN;
	if (what_to_do_EN)
	  what_to_do <= `BSV_ASSIGNMENT_DELAY what_to_do_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    b_filled = 4'hA;
    buffA_0_0 = 16'hAAAA;
    buffA_0_1 = 16'hAAAA;
    buffA_0_2 = 16'hAAAA;
    buffA_0_3 = 16'hAAAA;
    buffA_1_0 = 16'hAAAA;
    buffA_1_1 = 16'hAAAA;
    buffA_1_2 = 16'hAAAA;
    buffA_1_3 = 16'hAAAA;
    buffA_2_0 = 16'hAAAA;
    buffA_2_1 = 16'hAAAA;
    buffA_2_2 = 16'hAAAA;
    buffA_2_3 = 16'hAAAA;
    buffA_3_0 = 16'hAAAA;
    buffA_3_1 = 16'hAAAA;
    buffA_3_2 = 16'hAAAA;
    buffA_3_3 = 16'hAAAA;
    buffB_0_0 = 16'hAAAA;
    buffB_0_1 = 16'hAAAA;
    buffB_0_2 = 16'hAAAA;
    buffB_0_3 = 16'hAAAA;
    buffB_1_0 = 16'hAAAA;
    buffB_1_1 = 16'hAAAA;
    buffB_1_2 = 16'hAAAA;
    buffB_1_3 = 16'hAAAA;
    buffB_2_0 = 16'hAAAA;
    buffB_2_1 = 16'hAAAA;
    buffB_2_2 = 16'hAAAA;
    buffB_2_3 = 16'hAAAA;
    buffB_3_0 = 16'hAAAA;
    buffB_3_1 = 16'hAAAA;
    buffB_3_2 = 16'hAAAA;
    buffB_3_3 = 16'hAAAA;
    buffC_0_0 = 32'hAAAAAAAA;
    buffC_0_1 = 32'hAAAAAAAA;
    buffC_0_2 = 32'hAAAAAAAA;
    buffC_0_3 = 32'hAAAAAAAA;
    buffC_1_0 = 32'hAAAAAAAA;
    buffC_1_1 = 32'hAAAAAAAA;
    buffC_1_2 = 32'hAAAAAAAA;
    buffC_1_3 = 32'hAAAAAAAA;
    buffC_2_0 = 32'hAAAAAAAA;
    buffC_2_1 = 32'hAAAAAAAA;
    buffC_2_2 = 32'hAAAAAAAA;
    buffC_2_3 = 32'hAAAAAAAA;
    buffC_3_0 = 32'hAAAAAAAA;
    buffC_3_1 = 32'hAAAAAAAA;
    buffC_3_2 = 32'hAAAAAAAA;
    buffC_3_3 = 32'hAAAAAAAA;
    job_done = 1'h0;
    regA = 64'hAAAAAAAAAAAAAAAA;
    regB = 64'hAAAAAAAAAAAAAAAA;
    regC = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    regS = 1'h0;
    what_to_do = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkArrMult

